# 指定运行Nginx的用户
user nginx;
# 自动设置工作进程数，通常设置为CPU核心数
worker_processes auto;
# 指定错误日志的存放路径和日志级别
error_log /var/log/nginx/error.log;
# 指定Nginx主进程的PID文件存放路径
pid /run/nginx.pid;

# 事件模块配置
events {
    # 设置每个工作进程的最大连接数
    worker_connections 1024;
}

# HTTP模块配置
http {
    # 启用gzip压缩
    gzip on;
    # 设置gzip压缩级别，1-9，数字越大压缩效果越好但CPU消耗越高
    gzip_comp_level 6;
    # 设置压缩的最小文件大小，小于此值的文件不会被压缩
    gzip_min_length 256;
    # 设置用于压缩的缓冲区数量和大小
    gzip_buffers 16 8k;
    # 指定要压缩的MIME类型
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    # 禁用IE6的gzip压缩
    gzip_disable "msie6";
    # 在响应头中添加Vary: Accept-Encoding
    gzip_vary on;
    # 启用静态文件的gzip预压缩功能
    gzip_static on;

    # 定义日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';
    # 设置访问日志的存放路径和使用的日志格式
    access_log /var/log/nginx/access.log main;

    # 启用高效传输文件的模式
    sendfile on;
    # 启用TCP_NOPUSH，在sendfile开启时使用
    tcp_nopush on;
    # 启用TCP_NODELAY，保持连接活跃
    tcp_nodelay on;
    # 设置客户端连接保持活动的超时时间
    keepalive_timeout 65;
    # 设置哈希表的最大大小
    types_hash_max_size 4096;

    # 包含MIME类型定义文件
    include /etc/nginx/mime.types;
    # 设置默认的MIME类型
    default_type application/octet-stream;

    # HTTP服务器配置
    server {
        listen 80;
        listen [::]:80;
        server_name localhost;
        root /usr/share/nginx/html;
        
        # 添加这个配置来处理SPA路由
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # 如果需要API代理，也可以添加
        location /api/ {
            proxy_pass http://server:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # docs文档目录
        location /docs/ {
            root   /usr/share/nginx/html;
            autoindex on;  # 启用目录浏览
            try_files $uri $uri/ =404;
        }

        # 图片资源目录
        location /resource/ {
            root   /usr/share/nginx/html;
            autoindex on;  # 启用目录浏览
            try_files $uri $uri/ =404;
        }

        # 专门处理Markdown文件
        location ~* \.(?:md|markdown)$ {
            root   /usr/share/nginx/html;
            add_header Content-Type "text/markdown; charset=utf-8";
        }
    }

    # HTTPS服务器配置
    server {
        # 监听IPv4的443端口，启用SSL和HTTP/2
        listen 443 ssl;
        # 监听IPv6的443端口，启用SSL和HTTP/2
        listen [::]:443 ssl;
        http2 on;
        # 设置服务器名称
        server_name localhost;
        # 设置网站根目录
        root /usr/share/nginx/html;

        # 添加这个配置来处理SPA路由
        location / {
            try_files $uri $uri/ /index.html;
        }

        # 如果需要API代理，也可以添加
        location /api/ {
            proxy_pass https://server:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # docs文档目录
        location /docs/ {
            root   /usr/share/nginx/html;
            autoindex on;  # 启用目录浏览
            try_files $uri $uri/ =404;
        }

        # 图片资源目录
        location /resource/ {
            root   /usr/share/nginx/html;
            autoindex on;  # 启用目录浏览
            try_files $uri $uri/ =404;
        }

        # 专门处理Markdown文件
        location ~* \.(?:md|markdown)$ {
            root   /usr/share/nginx/html;
            add_header Content-Type "text/markdown; charset=utf-8";
        }
        
        # 配置SSL证书文件路径
        ssl_certificate "/etc/nginx/ssl/www.predaking.xyz.pem";
        # 配置SSL私钥文件路径
        ssl_certificate_key "/etc/nginx/ssl/www.predaking.xyz.key";
        # 配置SSL会话缓存
        ssl_session_cache shared:SSL:1m;
        # 配置SSL会话超时时间
        ssl_session_timeout 10m;
        # 配置SSL加密算法
        ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
        # 优先使用服务器端的加密算法
        ssl_prefer_server_ciphers on;

        # 配置404错误页面
        error_page 404 /404.html;
        # 配置50x错误页面
        error_page 500 502 503 504 /50x.html;

        # 配置40x错误页面的处理位置
        location = /40x.html {
        }

        # 配置50x错误页面的处理位置
        location = /50x.html {
        }
    }
}